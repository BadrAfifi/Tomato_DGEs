library(GEOquery)
my_id <- "GSE63477"
my_id <- "GSE63477"
gse <- getGEO(my_id)
## check how many platforms used
length(gse)
gse
gse <- gse[[1]]
gse
## exprs get the expression levels as a data frame and get the distribution
summary(exprs(gse))
my_id <- "GSE33126"
gse <- getGEO(my_id)
## check how many platforms used
length(gse)
gse <- gse[[1]]
gse
pData(gse) ## print the sample information
fData(gse) ## print the gene annotation
exprs(gse) ## print the expression data
## exprs get the expression levels as a data frame and get the distribution
summary(exprs(gse))
boxplot(exprs(gse),outline=FALSE)
boxplot(exprs(gse),outline=FALSE)
exprs(gse) <- log2(exprs(gse))
boxplot(exprs(gse),outline=FALSE)
library(dplyr)
#***For your own data, you will have to decide which columns will be useful in the analysis
sampleInfo <- pData(gse)
sampleInfo
rownames(sampleInfo)
#***For your own data, you will have to decide which columns will be useful in the analysis
sampleInfo <- pData(gse)
rownames(sampleInfo)
colnames(sampleInfo)
sampleInfo <- select(sampleInfo, source_name_ch1,characteristics_ch1.1)
## Optionally, rename to more convenient column names
sampleInfo <- rename(sampleInfo,group = source_name_ch1, patient=characteristics_ch1.1)
sampleInfo
library(pheatmap)
corMatrix <- cor(exprs(gse),use="c")
pheatmap(corMatrix)
rownames(sampleInfo) <- colnames(corMatrix)
pheatmap(corMatrix,
annotation_col=sampleInfo)
library(ggplot2)
pca <- prcomp(t(exprs(gse)))
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=group,label=paste("Patient", patient))) + geom_point() + geom_text_repel()
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=group,label=paste("Patient", patient))) + geom_point() + geom_text_repel()
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=group,label=paste("Patient", patient))) + geom_point()
## Join the PCs to the sample information
cbind(sampleInfo, pca$x) %>%
ggplot(aes(x = PC1, y=PC2, col=group,label=paste("Patient", patient))) + geom_point() + geom_text_repel()
library(readr)
full_output <- cbind(fData(gse),exprs(gse))
write_csv(full_output, path="gse_full_output.csv")
features <- fData(gse)
View(features)
### Look at the features data frame and decide the names of the columns you want to keep
features <- select(features,Symbol,Entrez_Gene_ID,Chromosome,Cytoband)
full_output <- cbind(features,exprs(gse))
write_csv(full_output, path="gse_full_output.csv")
library(limma)
design <- model.matrix(~0+sampleInfo$group)
design
## the column names are a bit ugly, so we will rename
colnames(design) <- c("Normal","Tumour")
summary(exprs(gse))
## calculate median expression level
cutoff <- median(exprs(gse))
cutoff
## TRUE or FALSE for whether each gene is "expressed" in each sample
is_expressed <- exprs(gse) > cutoff
keep <- rowSums(is_expressed) > 2
## check how many genes are removed / retained.
table(keep)
## subset to just those expressed genes
gse <- gse[keep,]
gse
fit <- lmFit(exprs(gse), design)
head(fit$coefficients)
fit
contrasts <- makeContrasts(Tumour - Normal, levels=design)
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2)
topTable(fit2)
topTable(fit2)
table(decideTests(fit2))
#***The lmFit function is used to fit the model to the data.
#The result of which is to estimate the expression level in each of the groups that we specified.
#***Coping with outliers
#It is tempting to discard any arrays which seem to be outliers prior to differential expressions.
#However, this is done at the expense of sample-size which could be an issue for small experiments.
#A compromise, which has been shown to work well is to calculate **weights to define the reliability of each sample.
aw <- arrayWeights(exprs(gse),design)
aw
fit <- lmFit(exprs(gse), design,
weights = aw)
head(fit$coefficients)
contrasts <- makeContrasts(Tumour - Normal, levels=design)
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2)
topTable(fit2)
table(decideTests(fit2))
anno <- fData(gse)
anno
anno <- select(anno,Symbol,Entrez_Gene_ID,Chromosome,Cytoband)
fit2$genes <- anno
topTable(fit2)
library(ggplot2)
full_results <- tibble::rownames_to_column(full_results,"Symbol")
#*** visualisation of DE results
full_results <- topTable(fit2, number=Inf)
full_results <- tibble::rownames_to_column(full_results,"Symbol")
full_results <- tibble::rownames_to_column(full_results,"ID")
ggplot(full_results,aes(x = logFC, y=B)) + geom_point()
## change according to your needs
p_cutoff <- 0.05
fc_cutoff <- 1
full_results %>%
mutate(Significant = adj.P.Val < p_cutoff, abs(logFC) > fc_cutoff ) %>%
ggplot(aes(x = logFC, y = B, col=Significant)) + geom_point()
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
p_cutoff <- 0.05
fc_cutoff <- 1
topN <- 20
full_results %>%
mutate(Significant = adj.P.Val < p_cutoff, abs(logFC) > fc_cutoff ) %>%
mutate(Rank = 1:n(), Label = ifelse(Rank < topN, Symbol,"")) %>%
ggplot(aes(x = logFC, y = B, col=Significant,label=Label)) + geom_point() + geom_text_repel(col="black")
pheatmap(processed_data)
library(GEOquery)
library(dplyr)
library(pheatmap)
library(ggplot2)
library(readr)
library(limma)
library(ggplot2)
pheatmap(processed_data)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
load("F:/DGE/ATAD2/GSE178243/DEGs[Hep3B]/.RData")
length
## check how many platforms used
length(gse)
gse <- getGEO(my_id)
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
gse <- getGEO(my_id)
gse <- getGEO(my_id)
gse <- getGEO(my_id)
gse <- getGEO(my_id)
gse <- getGEO(my_id)
gse <- getGEO(my_id)
## check how many platforms used
length(gse)
gse <- getGEO(my_id)
my_id <- "GSE178243"
gse <- getGEO(my_id)
gse <- getGEO(my_id)
gse <- getGEO(my_id)
library(survival)
library(survminer)
install.packages("survminer")
install.packages("survminer")
n
library(survminer)
# load breast cancer dataset
data <- survival::breast
data(breast)
data(BRCAOV.survInfo)
library(survival)
fit <- survfit(Surv(times, patient.vital_status) ~ admin.disease_code,
data = BRCAOV.survInfo)
ggsurvplot(fit, data = BRCAOV.survInfo, risk.table = TRUE)
data("BMT"
data()
data(package = .packages(all.available = TRUE))
data()
data("Prostate")
data(Prostate)
data("prostateSurvival")
data(prostateSurvival)
install.packages("prostateSurvival")
install.packages("asaur")
library(asaur)
data("prostateSurvival")
head(prostateSurvival)
prostateSurvival
0.05 > 0.059
0.05 > 0.02
0.05 > 0.034
setwd("F:/DGE/Tomato Genome/miRNA/DEmiRNAs")
processed_data <- read.table("DEsq2.txt")
processed_data <- read.table("DEsq2_results.txt")
View(processed_data)
processed_data <- read.table("DEsq2_results.txt", header = T)
View(processed_data)
processed_data <- read.table("DEsq2_results.txt", header = T, row.names = T)
processed_data <- read.table("DEsq2_results.txt", header = T, row.names = 1)
processed_data <- read.table("DEsq2_results.txt", header = T, row.names = 1)
processed_data <- read.table("DEsq2_results.txt", row.names = 1)
colnames(processed_data) <- c("GeneID",	"Base_mean",	"log2(FC)",
"StdErr",	"Wald-Stats",	"P-value", "	P-adj")
colnames(processed_data) <- c("Base_mean",	"log2(FC)",
"StdErr",	"Wald-Stats",	"P-value", "	P-adj")
processed_data <- read.table("DEsq2_results.txt", row.names = 1)
colnames(processed_data) <- c("Base_mean",	"log2(FC)","StdErr",
"Wald-Stats",	"P-value", "	P-adj")
degs.res= processed_data[abs(processed_data$logFC) >= 1  & processed_data$P.Value <= 0.05, ]
degs.res= processed_data[abs(processed_data$log2(FC)) >= 1  & processed_data$P.Value <= 0.05, ]
colnames(processed_data) <- c("Base_mean",	"log2FC","StdErr",
"Wald-Stats",	"P-value", "	P-adj")
degs.res= processed_data[abs(processed_data$log2FC >= 1  & processed_data$P.Value <= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC >= 1  & processed_data$P-adj <= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC >= 1  & processed_data$P-adj <= 0.05, ]
processed_data <- read.table("DEsq2_results.txt", row.names = 1)
colnames(processed_data) <- c("Base_mean",	"log2FC","StdErr",
"Wald-Stats",	"P-value", "	P-adj")
degs.res= processed_data[abs(processed_data$log2FC >= 1  & processed_data$P-adj <= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC) >= 1  & processed_data$P-adj <= 0.05, ]
colnames(processed_data) <- c("Base.mean",	"log2FC","StdErr",
"Wald.Stats",	"P.value", "	P.adj")
processed_data <- read.table("DEsq2_results.txt", row.names = 1)
colnames(processed_data) <- c("Base.mean",	"log2FC","StdErr",
"Wald.Stats",	"P.value", "	P.adj")
degs.res= processed_data[abs(processed_data$log2FC) >= 1  & processed_data$P-adj <= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC) >= 1  & processed_data$P.adj <= 0.05, ]
View(degs.res)
degs.res= processed_data[abs(processed_data$log2FC) >= 0  & processed_data$P.adj <= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC) >= 0  & processed_data$P.adj <= 0.05, ]
View(degs.res)
View(processed_data)
degs.res= processed_data[ processed_data$P.adj <= 0.05, ]
degs.res= processed_data[ processed_data$P.adj <= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC) >= 0  , ]
View(degs.res)
degs.res= processed_data[abs(processed_data$log2FC) >= 0  & processed_data$P.adj <= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC) >= 0  & processed_data$P.adj >= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC) >= 0  & processed_data$P.adj >= 0.05, ]
degs.res= processed_data[abs(processed_data$log2FC) >= 0  & processed_data$P.adj <= 0.05, ]
processed_data$P.adj
processed_data$log2FC
degs.res= processed_data[abs(processed_data$log2FC) >= 0  & processed_data$`	P.adj` <= 0.05, ]
colnames(processed_data) <- c("Base.mean",	"log2FC","StdErr",
"Wald.Stats",	"P.value", "P.adj")
degs.res= processed_data[abs(processed_data$log2FC) >= 0  & processed_data$P.adj <= 0.05, ]
View(degs.res)
View(processed_data)
res2 <- processed_data %>%
mutate(gene_type = case_when(log2FC >= 0  & P.adj <= 0.05 ~ "Up",
log2FC <= 0  & P.adj <= 0.05 ~ "Down",
TRUE ~ "N.s"))
library(dplyr)
res2 <- processed_data %>%
mutate(gene_type = case_when(log2FC >= 0  & P.adj <= 0.05 ~ "Up",
log2FC <= 0  & P.adj <= 0.05 ~ "Down",
TRUE ~ "N.s"))
res2 <- processed_data %>%
mutate(gene_type = case_when(log2FC >= 0  & P.adj <= 0.05 ~ "Up",
log2FC <= 0  & P.adj <= 0.05 ~ "Down",
TRUE ~ "N.s"))
cols <- c("Up" = "#FF0000", "Down" = "#00FF00", "N.s" = "grey")
sizes <- c("Up" = 2, "Down" = 2, "N.s" = 1)
alphas <- c("Up" = 1, "Down" = 1, "N.s" = 0.5)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(P.adj),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
library(gplots)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(P.adj),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
library(ggplot2)
res2 %>%
ggplot(aes(x = (logFC),
y = -log10(P.adj),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
res2 %>%
ggplot(aes(x = (log2FC),
y = -log10(P.adj),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(-1, 1),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
res2 %>%
ggplot(aes(x = (log2FC),
y = -log10(P.adj),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(0),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
res2 %>%
ggplot(aes(x = (log2FC),
y = -log10(P.adj),
fill = gene_type,
size = gene_type,
alpha = gene_type)) +
geom_point(shape = 21, # Specify shape and colour as fixed local parameters
colour = "black") +
geom_hline(yintercept = (0.05),
linetype = "dashed") +
geom_vline(xintercept = c(0),
linetype = "dashed") +
scale_fill_manual(values = cols) + # Modify point colour
scale_size_manual(values = sizes) + # Modify point size
scale_alpha_manual(values = alphas) + # Modify point transparency
scale_x_continuous(breaks = c(seq(-4, 4, 2)),
limits = c(-4, 4))
write.table(degs.res,file = "DEGs.txt",row.names = T,col.names = T,quote = F)
